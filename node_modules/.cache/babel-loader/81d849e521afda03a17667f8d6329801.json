{"ast":null,"code":"var _jsxFileName = \"/home/magda/treasure-hunter/src/components/GameBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GameBoard = () => {\n  _s();\n\n  const [move, setMove] = useState(1);\n  const uncoveredFields = useSelector(state => state.uncoveredFields);\n  const selectFields = useSelector(state => state.selectFields);\n  const line = [\"1\", \"2\", \"3\", \"4\", \"5\"];\n  useEffect(() => {\n    window.store.dispatch({\n      type: \"RESET_SELECT_FIELD\"\n    });\n    setName();\n    drawTreasures();\n  }, []);\n\n  const setName = () => {\n    let name = document.cookie.substr(5);\n\n    if (name.length === 0) {\n      let name = prompt(\"Please enter your name\");\n      document.cookie = \"name=\" + name;\n    }\n\n    return name;\n  };\n\n  const drawTreasures = () => {\n    let i = 0;\n\n    do {\n      let treasure = (Math.floor(Math.random() * (5 - 1 + 1)) + 1).toString() + (Math.floor(Math.random() * (5 - 1 + 1)) + 1);\n\n      if (treasures.includes(treasure) === false) {\n        treasures.push(treasure);\n      }\n\n      i++;\n    } while (treasures.length < 3);\n\n    return treasures;\n  };\n\n  useEffect(() => {\n    for (let i = 0; i < uncoveredFields.length; i++) {\n      console.log(uncoveredFields[i].id);\n      let coverField = document.getElementById(uncoveredFields[i].id);\n      coverField.innerText = uncoveredFields[i].find;\n    } // eslint-disable-next-line\n\n  }, [uncoveredFields]);\n  useEffect(() => {\n    if (move === 4) {\n      console.log(\"sprawdzam\", selectFields);\n      setMove(1);\n      window.store.dispatch({\n        type: \"RESET_SELECT_FIELD\"\n      });\n    } // eslint-disable-next-line\n\n  }, [move]);\n\n  const markField = field => {\n    function isFreeField(element) {\n      return element === field;\n    } // console.log(selectFields.some(isFreeField));\n\n\n    function isCoverField(element) {\n      return element.id === field;\n    } // console.log(uncoveredFields.some(isCoverField));\n\n\n    if (selectFields !== undefined && selectFields.some(isFreeField) === false && uncoveredFields !== undefined && uncoveredFields.some(isCoverField) === false) {\n      window.store.dispatch({\n        type: \"ADD_SELECT_FIELD\",\n        field: field\n      });\n      setMove(prevState => prevState + 1);\n    }\n\n    console.log(selectFields);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameBoard\",\n    children: line.map((col, id) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: line.map((row, id) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            id: `${col + row}`,\n            className: selectFields.length > 0 && selectFields.includes(`${col + row}`) ? `${col + row} field select` : `${col + row} field`,\n            onClick: () => markField(col + row)\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this);\n        })\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}; // const mapStateToProps = (state) => {\n//   return {\n//     selectFields: state.selectFields.selectFields,\n//     uncoveredFields: state.uncoveredFields.uncoveredFields,\n//     game: state.game,\n//   };\n// };\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     startGame: (game) => dispatch(startGame(game)),\n//   };\n// };\n\n\n_s(GameBoard, \"7HM9gxijPCSIT6WVnjBYV+l6GF0=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = GameBoard;\nexport default GameBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"sources":["/home/magda/treasure-hunter/src/components/GameBoard.js"],"names":["React","useState","useEffect","useSelector","GameBoard","move","setMove","uncoveredFields","state","selectFields","line","window","store","dispatch","type","setName","drawTreasures","name","document","cookie","substr","length","prompt","i","treasure","Math","floor","random","toString","treasures","includes","push","console","log","id","coverField","getElementById","innerText","find","markField","field","isFreeField","element","isCoverField","undefined","some","prevState","map","col","row"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst GameBoard = () => {\n  const [move, setMove] = useState(1);\n\n  const uncoveredFields = useSelector((state) => state.uncoveredFields);\n  const selectFields = useSelector((state) => state.selectFields);\n\n  const line = [\"1\", \"2\", \"3\", \"4\", \"5\"];\n\n  useEffect(() => {\n    window.store.dispatch({ type: \"RESET_SELECT_FIELD\" });\n    setName();\n    drawTreasures();\n  }, []);\n\n  const setName = () => {\n    let name = document.cookie.substr(5);\n    if (name.length === 0) {\n      let name = prompt(\"Please enter your name\");\n      document.cookie = \"name=\" + name;\n    }\n    return name;\n  };\n\n  const drawTreasures = () => {\n    let i = 0;\n    do {\n      let treasure =\n        (Math.floor(Math.random() * (5 - 1 + 1)) + 1).toString() +\n        (Math.floor(Math.random() * (5 - 1 + 1)) + 1);\n\n      if (treasures.includes(treasure) === false) {\n        treasures.push(treasure);\n      }\n\n      i++;\n    } while (treasures.length < 3);\n\n    return treasures;\n  };\n\n  useEffect(() => {\n    for (let i = 0; i < uncoveredFields.length; i++) {\n      console.log(uncoveredFields[i].id);\n      let coverField = document.getElementById(uncoveredFields[i].id);\n      coverField.innerText = uncoveredFields[i].find;\n    }\n    // eslint-disable-next-line\n  }, [uncoveredFields]);\n\n  useEffect(() => {\n    if (move === 4) {\n      console.log(\"sprawdzam\", selectFields);\n      setMove(1);\n      window.store.dispatch({ type: \"RESET_SELECT_FIELD\" });\n    }\n    // eslint-disable-next-line\n  }, [move]);\n\n  const markField = (field) => {\n    function isFreeField(element) {\n      return element === field;\n    }\n    // console.log(selectFields.some(isFreeField));\n\n    function isCoverField(element) {\n      return element.id === field;\n    }\n    // console.log(uncoveredFields.some(isCoverField));\n\n    if (\n      selectFields !== undefined &&\n      selectFields.some(isFreeField) === false &&\n      uncoveredFields !== undefined &&\n      uncoveredFields.some(isCoverField) === false\n    ) {\n      window.store.dispatch({ type: \"ADD_SELECT_FIELD\", field: field });\n      setMove((prevState) => prevState + 1);\n    }\n    console.log(selectFields);\n  };\n\n  return (\n    <div className=\"gameBoard\">\n      {line.map((col, id) => {\n        return (\n          <div key={id}>\n            {line.map((row, id) => {\n              return (\n                <div\n                  key={id}\n                  id={`${col + row}`}\n                  className={\n                    selectFields.length > 0 &&\n                    selectFields.includes(`${col + row}`)\n                      ? `${col + row} field select`\n                      : `${col + row} field`\n                  }\n                  onClick={() => markField(col + row)}\n                >\n                  {/* {col} */}\n                  {/* {row} */}\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\n// const mapStateToProps = (state) => {\n//   return {\n//     selectFields: state.selectFields.selectFields,\n//     uncoveredFields: state.uncoveredFields.uncoveredFields,\n//     game: state.game,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     startGame: (game) => dispatch(startGame(game)),\n//   };\n// };\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}